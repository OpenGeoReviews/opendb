buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
    }
}

apply plugin: 'antlr'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


task generateGitProperties {
    doLast {
        try {
            // def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
            // def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
            // def commitHash = revision.split(' ').last()
            // def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null
            def commit = 'git log -1 --pretty=format:"%h%x09%an%x09%ad%x09%s"'.execute().text.trim()
            File propertiesFile = new File(project.getBuildDir(), '/resources/main/git.properties')
            if (commit) {
                propertiesFile.text = """git.commit.format=$commit"""
            }
        } catch (e) {
            project.logger.error('Unable to generate Git properties file.', e)
        }
    }
}

test {
    exclude '**/service'
}

task embeddedPostgresTest(type: Test) {
    include '**/service/'
}

bootJar {
    dependsOn generateGitProperties
    launchScript()

    baseName = 'openplacereviews-server-boot'
    version =  version
    mainClassName = 'org.openplacereviews.opendb.OpenDBServer'
}

generateGrammarSource {
    outputDirectory = file("src/main/java/org/openplacereviews/opendb/expr")
    arguments += ["-package", "org.openplacereviews.opendb.expr"]
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:2.0.1.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-actuator:2.0.1.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-security:2.0.1.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:2.0.1.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.0.1.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-data-redis:2.0.1.RELEASE"

    implementation "nl.basjes.parse.httpdlog:httpdlog-parser:5.1"
    antlr "org.antlr:antlr4:4.5" 
    

    // make optional for release run
    implementation "org.springframework.boot:spring-boot-devtools:2.0.1.RELEASE"

    implementation "org.springframework.security.oauth:spring-security-oauth2:2.2.2.RELEASE"
    implementation "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.1.RELEASE"

    // security dependencies consistent
    // implementation 'org.springframework.security:spring-security-web:5.0.6.RELEASE'
    // implementation 'org.springframework.security:spring-security-core:5.0.6.RELEASE'
    // implementation 'org.springframework.security:spring-security-config:5.0.6.RELEASE'
    // implementation 'org.springframework.security:spring-security-oauth2-client:5.0.6.RELEASE'
    
    implementation "org.springframework.cloud:spring-cloud-security:1.2.2.RELEASE"

    implementation "org.apache.commons:commons-collections4:4.1"
    implementation "com.j256.simplecsv:simplecsv:2.3"
    implementation "com.google.code.gson:gson:2.8.2"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
	implementation group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'



    implementation group: 'xmlpull', name: 'xmlpull', version: '1.1.3.1'
    implementation group: 'net.sf.kxml', name: 'kxml2', version: '2.3.0'

    testImplementation "junit:junit"
    testImplementation "pl.pragmatists:JUnitParams:0.3.6"


    testImplementation "org.apache.httpcomponents:httpclient:4.5.7"
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    testCompile "com.github.tomakehurst:wiremock-standalone:2.18.0"
    testCompile "ru.yandex.qatools.embed:postgresql-embedded:2.9"
    
}
